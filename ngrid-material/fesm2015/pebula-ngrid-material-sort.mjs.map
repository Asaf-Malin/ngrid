{"version":3,"file":"pebula-ngrid-material-sort.mjs","sources":["../../../../libs/ngrid-material/sort/src/lib/mat-sort.directive.ts","../../../../libs/ngrid-material/sort/src/lib/mat-sort-component-extension.ts","../../../../libs/ngrid-material/sort/src/lib/mat-sort.module.ts","../../../../libs/ngrid-material/sort/src/pebula-ngrid-material-sort.ts"],"sourcesContent":["import { Directive, OnDestroy } from '@angular/core';\nimport { Sort, MatSort, MatSortHeader, SortDirection } from '@angular/material/sort';\n\nimport { ON_INVALIDATE_HEADERS, unrx } from '@asafmalin/ngrid/core';\nimport { PblNgridComponent, PblNgridPluginController, PblNgridSortDefinition, PblDataSource } from '@asafmalin/ngrid';\n\ndeclare module '@asafmalin/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    matSort?: PblNgridMatSortDirective;\n  }\n}\nexport const PLUGIN_KEY: 'matSort' = 'matSort';\n\n@Directive({ selector: 'pbl-ngrid[matSort]', exportAs: 'pblMatSort' })\nexport class PblNgridMatSortDirective implements OnDestroy {\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<any>, private pluginCtrl: PblNgridPluginController, public sort: MatSort) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    let origin: 'ds' | 'click' = 'click';\n    this.sort.sortChange\n      .pipe(unrx(this))\n      .subscribe( s => {\n        this.onSort(s, origin);\n        origin = 'click';\n      });\n\n    const handleDataSourceSortChange = (sortChange: PblDataSource['sort']) => {\n      const { column } = sortChange;\n      const order = sortChange.sort ? sortChange.sort.order : undefined;\n\n      if (this.sort && column) {\n        if (this.sort.active === column.id && this.sort.direction === (order || '')) { return; }\n        const sortable: MatSortHeader = this.sort.sortables.get(column.id) as any;\n        if (sortable) {\n          origin = 'ds';\n          this.sort.active = undefined;\n          sortable.start = order || 'asc';\n          sortable._handleClick();\n        }\n      } else if (this.sort.active) { // clear mode (hit from code, not click).\n        const sortable: MatSortHeader = this.sort.sortables.get(this.sort.active) as any;\n        if (sortable ) {\n          if (!sortable.disableClear) {\n            let nextSortDir: SortDirection;\n            while (nextSortDir = this.sort.getNextSortDirection(sortable)) {\n              this.sort.direction = nextSortDir;\n            }\n          }\n          origin = 'ds';\n          sortable._handleClick();\n        }\n      }\n    }\n\n    pluginCtrl.events\n      .pipe(ON_INVALIDATE_HEADERS)\n      .subscribe( e => {\n        const hasActiveSort = this.sort && this.sort.active;\n        if (table.ds && table.ds.sort) {\n          if (!table.ds.sort.column && hasActiveSort) {\n            this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n          } else if (table.ds.sort.column && !hasActiveSort) {\n            setTimeout(() => handleDataSourceSortChange(table.ds.sort));\n          }\n        }\n      });\n\n    pluginCtrl.events\n      .subscribe( e => {\n        if (e.kind === 'onDataSource') {\n          unrx.kill(this, e.prev);\n          if (this.sort && this.sort.active) {\n            this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n          }\n          table.ds.sortChange\n            .pipe(unrx(this, e.curr))\n            .subscribe( event => { handleDataSourceSortChange(event); });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.table);\n    unrx.kill(this);\n  }\n\n  private onSort(sort: Sort, origin: 'ds' | 'click'): void {\n    const table = this.table;\n    const column = table.columnApi.visibleColumns.find(c => c.id === sort.active);\n\n    if ( origin !== 'click' || !column || !column.sort ) {\n      return;\n    } else {\n      const newSort: PblNgridSortDefinition = { };\n      const sortFn = typeof column.sort === 'function' && column.sort;\n      if (sort.direction) {\n        newSort.order = sort.direction;\n      }\n      if (sortFn) {\n        newSort.sortFn = sortFn;\n      }\n      const currentSort = table.ds.sort;\n      if (column === currentSort.column) {\n        const _sort = currentSort.sort || {};\n        if (newSort.order === _sort.order) {\n          return;\n        }\n      }\n      table.ds.setSort(column, newSort);\n    }\n  }\n\n}\n","import { ComponentFactory, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { MatSort, MatSortHeader } from '@angular/material/sort';\n\nimport { PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext } from '@asafmalin/ngrid';\n\nexport class MatSortExtension extends PblNgridMultiComponentRegistry<MatSortHeader, 'dataHeaderExtensions'> {\n  readonly name: 'sortContainer' = 'sortContainer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  readonly projectContent = true;\n\n  constructor(private cfr: ComponentFactoryResolver) {\n    super();\n  }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.sort && !!context.injector.get<MatSort>(MatSort, false as any);\n  }\n\n  getFactory(context: PblNgridDataHeaderExtensionContext): ComponentFactory<MatSortHeader> {\n    return this.cfr.resolveComponentFactory(MatSortHeader);\n  }\n\n  onCreated(context: PblNgridDataHeaderExtensionContext, cmpRef: ComponentRef<MatSortHeader>): void {\n    // We assign the ID and also verify that it does not exist on the `MatSort` container\n    // It might exists on specific scenarios when a header is removed and added instantly but the \"add\" part happens before the teardown so the `MatSort` will throw.\n    this.deregisterId(context, cmpRef.instance.id = context.col.id);\n    cmpRef.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Check that the current `MatSort` does not already have a sortable header with the provided id.\n   */\n  private deregisterId(context: PblNgridDataHeaderExtensionContext, id: any) {\n    const matSort = context.injector.get<MatSort>(MatSort);\n    const matSortHeader = matSort.sortables.get(id)\n    if (matSortHeader) {\n      matSort.deregister(matSortHeader);\n    }\n  }\n}\n","import { NgModule, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSortModule, MatSortHeader } from '@angular/material/sort';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { PblNgridRegistryService, PblNgridModule, ngridPlugin } from '@asafmalin/ngrid';\nimport { PblNgridMatSortDirective, PLUGIN_KEY } from './mat-sort.directive';\nimport { MatSortExtension } from './mat-sort-component-extension';\n\n@NgModule({\n    imports: [CommonModule, MatButtonModule, MatSortModule, PblNgridModule],\n    declarations: [PblNgridMatSortDirective],\n    exports: [PblNgridMatSortDirective, MatSortModule]\n})\nexport class PblNgridMatSortModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY }, PblNgridMatSortDirective);\n\n  constructor(private registry: PblNgridRegistryService, cfr: ComponentFactoryResolver) {\n    registry.addMulti('dataHeaderExtensions', new MatSortExtension(cfr));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}