{"version":3,"file":"pebula-ngrid-material-selection-column.mjs","sources":["../../../../libs/ngrid-material/selection-column/src/lib/table-checkbox.component.ts","../../../../libs/ngrid-material/selection-column/src/lib/table-checkbox.component.html","../../../../libs/ngrid-material/selection-column/src/lib/checkbox-plugin.directive.ts","../../../../libs/ngrid-material/selection-column/src/lib/table-checkbox.module.ts","../../../../libs/ngrid-material/selection-column/src/pebula-ngrid-material-selection-column.ts"],"sourcesContent":["import { Component, Input, ViewChild, ViewEncapsulation, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ThemePalette } from '@angular/material/core';\n\nimport { unrx } from '@pebula/ngrid/core';\nimport {\n  PblNgridComponent,\n  PblNgridHeaderCellDefDirective,\n  PblNgridCellDefDirective,\n  PblNgridFooterCellDefDirective,\n  PblNgridPluginController,\n} from '@pebula/ngrid';\n\nconst ALWAYS_FALSE_FN = () => false;\n\n@Component({\n  selector: 'pbl-ngrid-checkbox',\n  templateUrl: './table-checkbox.component.html',\n  styleUrls: ['./table-checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridCheckboxComponent implements AfterViewInit, OnDestroy {\n  /**\n   * Unique name for the checkbox column.\n   * When not set, the name 'checkbox' is used.\n   *\n   **/\n  @Input() name: string;\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      this.setupSelection();\n    }\n  }\n  /**\n   * A Custom selection model, optional.\n   * If not set, the selection model from the DataSource is used.\n   */\n  @Input() get selection(): SelectionModel<any> {\n    return this._selection;\n  }\n  set selection(value: SelectionModel<any>) {\n    if (value !== this._selection) {\n      this._selection = value;\n      this.setupSelection();\n    }\n  }\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (!this._isCheckboxDisabled || typeof this._isCheckboxDisabled !== 'function') {\n        this._isCheckboxDisabled = ALWAYS_FALSE_FN;\n      }\n    }\n  }\n\n  @Input() get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    if (value !== this._color) {\n      this._color = value;\n      if (this.table.isInit) {\n        this.markAndDetect();\n      }\n    }\n  }\n\n  @ViewChild(PblNgridHeaderCellDefDirective, { static: true }) headerDef: PblNgridHeaderCellDefDirective<any>;\n  @ViewChild(PblNgridCellDefDirective, { static: true }) cellDef: PblNgridCellDefDirective<any>;\n  @ViewChild(PblNgridFooterCellDefDirective, { static: true }) footerDef: PblNgridFooterCellDefDirective<any>;\n\n  allSelected = false;\n  length: number;\n\n  private _selection: SelectionModel<any>;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _isCheckboxDisabled: (row: any) => boolean = ALWAYS_FALSE_FN;\n  private _color: ThemePalette;\n\n  constructor(public table: PblNgridComponent<any>, private cdr: ChangeDetectorRef) {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    pluginCtrl.events\n      .pipe(unrx(this))\n      .subscribe( e => {\n        if (e.kind === 'onDataSource') {\n          this.selection = e.curr.selection;\n        }\n      });\n\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.selection && this.table.ds) {\n      this.selection = this.table.ds.selection;\n    }\n\n    const registry = this.table.registry;\n    registry.addMulti('headerCell', this.headerDef);\n    registry.addMulti('tableCell', this.cellDef);\n    registry.addMulti('footerCell', this.footerDef);\n  }\n\n  ngOnDestroy(): void {\n    unrx.kill(this);\n  }\n\n  masterToggle(): void {\n    if (this.allSelected) {\n      this.selection.clear();\n    } else {\n      const selected = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n      this.selection.select(...selected);\n    }\n  }\n\n  rowItemChange(row: any): void {\n    this.selection.toggle(row);\n    this.markAndDetect();\n  }\n\n  private getCollection() {\n    const { ds } = this.table;\n    return this.bulkSelectMode === 'view' ? ds.renderedData : ds.source;\n  }\n\n  private setupSelection(): void {\n    unrx.kill(this, this.table);\n    if (this._selection) {\n      this.length = this.selection.selected.length;\n      this.selection.changed\n        .pipe(unrx(this, this.table))\n        .subscribe(() => this.handleSelectionChanged());\n      const changeSource = this.bulkSelectMode === 'view' ? this.table.ds.onRenderedDataChanged : this.table.ds.onSourceChanged;\n      changeSource\n        .pipe(unrx(this, this.table))\n        .subscribe(() => this.handleSelectionChanged());\n    } else {\n      this.length = 0;\n    }\n  }\n\n  private handleSelectionChanged() {\n    const { length } = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n    this.allSelected = !this.selection.isEmpty() && this.selection.selected.length === length;\n    this.length = this.selection.selected.length;\n    this.markAndDetect();\n  }\n\n  private markAndDetect() {\n    this.cdr.markForCheck();\n    this.cdr.detectChanges();\n  }\n}\n","<ng-container *pblNgridHeaderCellDef=\"name; col as col;\">\n  <mat-checkbox *ngIf=\"bulkSelectMode !== 'none'\"\n                style=\"overflow: initial\"\n                [color]=\"color\"\n                (click)=\"$event.stopPropagation()\"\n                (change)=\"$event ? masterToggle() : null\"\n                [checked]=\"allSelected\"\n                [indeterminate]=\"length > 0 && !allSelected\">\n  </mat-checkbox>\n</ng-container>\n<mat-checkbox *pblNgridCellDef=\"name; row as row;\"\n              style=\"overflow: initial\"\n              class=\"pbl-ngrid-selection-checkbox\"\n              [color]=\"color\"\n              [disabled]=isCheckboxDisabled(row)\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"rowItemChange(row)\"\n              [checked]=\"selection.isSelected(row)\">\n</mat-checkbox>\n<span *pblNgridFooterCellDef=\"name; col as col;\">{{ length ? length : '' }}</span>\n","import { Directive, Injector, Input, OnDestroy, ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n\nimport { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PblNgridCheckboxComponent } from './table-checkbox.component';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    matCheckboxSelection?: PblNgridMatCheckboxSelectionDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'matCheckboxSelection' = 'matCheckboxSelection';\n\n@Directive({ selector: 'pbl-ngrid[matCheckboxSelection]' })\nexport class PblNgridMatCheckboxSelectionDirective implements OnDestroy {\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean ) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (this.cmpRef && value) {\n        this.cmpRef.instance.isCheckboxDisabled = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Add's a selection column using material's `mat-checkbox` in the column specified.\n   */\n  @Input() get matCheckboxSelection(): string { return this._name; }\n  set matCheckboxSelection(value: string ) {\n    if (value !== this._name) {\n      this._name = value;\n      if (!value) {\n        if (this.cmpRef) {\n          this.cmpRef.destroy();\n          this.cmpRef = undefined;\n        }\n      } else {\n        if (!this.cmpRef) {\n          this.cmpRef = this.cfr.resolveComponentFactory(PblNgridCheckboxComponent).create(this.injector);\n          this.cmpRef.instance.table = this.table;\n          if (this._bulkSelectMode) {\n            this.cmpRef.instance.bulkSelectMode = this._bulkSelectMode;\n          }\n          this.cmpRef.instance.color = this._color;\n        }\n        if (this.isCheckboxDisabled) {\n          this.cmpRef.instance.isCheckboxDisabled = this.isCheckboxDisabled;\n        }\n        this.cmpRef.instance.name = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.bulkSelectMode = value;\n      }\n    }\n  }\n\n  @Input() get matCheckboxSelectionColor(): ThemePalette { return this._color; }\n  set matCheckboxSelectionColor(value: ThemePalette) {\n    if (value !== this._color) {\n      this._color = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.color = value;\n      }\n    }\n  }\n\n  private _name: string;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _color: ThemePalette = 'primary';\n  private cmpRef: ComponentRef<PblNgridCheckboxComponent>;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _isCheckboxDisabled: (row: any) => boolean;\n\n  constructor(private table: PblNgridComponent<any>,\n              private cfr: ComponentFactoryResolver,\n              private injector: Injector,\n              pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    this._removePlugin(this.table);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { PblNgridModule, ngridPlugin } from '@pebula/ngrid';\nimport { PblNgridMatCheckboxSelectionDirective, PLUGIN_KEY } from './checkbox-plugin.directive';\nimport { PblNgridCheckboxComponent } from './table-checkbox.component';\n\n@NgModule({\n    imports: [CommonModule, MatCheckboxModule, PblNgridModule],\n    declarations: [PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent],\n    exports: [PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent]\n})\nexport class PblNgridCheckboxModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY }, PblNgridMatCheckboxSelectionDirective);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}