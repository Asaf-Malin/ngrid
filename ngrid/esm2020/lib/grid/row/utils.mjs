export function initColumnOrMetaRow(element, isFooter) {
    element.classList.add(...(isFooter ? ['cdk-footer-row', 'pbl-ngrid-footer-row'] : ['cdk-header-row', 'pbl-ngrid-header-row']));
}
export function setRowVisibility(element, visible) {
    if (visible) {
        element.classList.remove('pbl-ngrid-row-hidden');
    }
    else {
        element.classList.add('pbl-ngrid-row-hidden');
    }
}
export function applyMetaRowClass(metaRowsService, metaRows, element, oldMetaRow, newMetaRow) {
    if (oldMetaRow) {
        if (oldMetaRow.rowClassName) {
            element.classList.remove(oldMetaRow.rowClassName);
        }
        metaRowsService.removeMetaRow(metaRows);
    }
    metaRows.meta = newMetaRow;
    if (newMetaRow) {
        if (newMetaRow.rowClassName) {
            element.classList.add(newMetaRow.rowClassName);
        }
        metaRowsService.addMetaRow(metaRows);
    }
}
const FIRST_LAST_ROW_SELECTORS = {
    header: {
        selector: 'pbl-ngrid-header-row',
        first: 'pbl-ngrid-first-header-row',
        last: 'pbl-ngrid-last-header-row',
    },
    footer: {
        selector: 'pbl-ngrid-footer-row',
        first: 'pbl-ngrid-first-footer-row',
        last: 'pbl-ngrid-last-footer-row',
    }
};
export function updateMetaRowFirstLastClass(section, root, prev) {
    const sectionCss = FIRST_LAST_ROW_SELECTORS[section];
    const rows = root.querySelectorAll(`.${sectionCss.selector}:not(.pbl-ngrid-row-visually-hidden):not(.pbl-ngrid-row-hidden)`);
    const first = rows[0];
    if (prev.first !== first) {
        prev.first?.classList.remove(sectionCss.first);
        first?.classList.add(sectionCss.first);
    }
    const last = rows[rows.length - 1];
    if (prev.last !== last) {
        prev.last?.classList.remove(sectionCss.last);
        last?.classList.add(sectionCss.last);
    }
    return { first, last };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3NyYy9saWIvZ3JpZC9yb3cvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE9BQW9CLEVBQUUsUUFBaUI7SUFDekUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pJLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBb0IsRUFBRSxPQUFnQjtJQUNyRSxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDbEQ7U0FBTTtRQUNMLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDL0M7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLGVBQXVDLEVBQ3ZDLFFBQW9CLEVBQ3BCLE9BQW9CLEVBQ3BCLFVBQWlDLEVBQ2pDLFVBQWlDO0lBQ2pFLElBQUksVUFBVSxFQUFFO1FBQ2QsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDtRQUNELGVBQWUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekM7SUFDRCxRQUFRLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUMzQixJQUFJLFVBQVUsRUFBRTtRQUNkLElBQUksVUFBVSxDQUFDLFlBQVksRUFBRTtZQUMzQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEQ7UUFDRCxlQUFlLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUVELE1BQU0sd0JBQXdCLEdBQUc7SUFDL0IsTUFBTSxFQUFFO1FBQ04sUUFBUSxFQUFFLHNCQUFzQjtRQUNoQyxLQUFLLEVBQUUsNEJBQTRCO1FBQ25DLElBQUksRUFBRSwyQkFBMkI7S0FDbEM7SUFDRCxNQUFNLEVBQUU7UUFDTixRQUFRLEVBQUUsc0JBQXNCO1FBQ2hDLEtBQUssRUFBRSw0QkFBNEI7UUFDbkMsSUFBSSxFQUFFLDJCQUEyQjtLQUNsQztDQUNGLENBQUM7QUFFRixNQUFNLFVBQVUsMkJBQTJCLENBQUMsT0FBOEMsRUFDOUMsSUFBYSxFQUNiLElBQXlDO0lBQ25GLE1BQU0sVUFBVSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLGlFQUFpRSxDQUFDLENBQUM7SUFFN0gsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7UUFDeEIsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDeEM7SUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGJsTWV0YVJvd0RlZmluaXRpb25zIH0gZnJvbSAnQHBlYnVsYS9uZ3JpZC9jb3JlJztcbmltcG9ydCB7IFBibE5ncmlkTWV0YVJvd1NlcnZpY2UsIFBibE1ldGFSb3cgfSBmcm9tICcuLi9tZXRhLXJvd3MvbWV0YS1yb3cuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Q29sdW1uT3JNZXRhUm93KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBpc0Zvb3RlcjogYm9vbGVhbikge1xuICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uKGlzRm9vdGVyID8gWydjZGstZm9vdGVyLXJvdycsICdwYmwtbmdyaWQtZm9vdGVyLXJvdyddIDogWydjZGstaGVhZGVyLXJvdycsICdwYmwtbmdyaWQtaGVhZGVyLXJvdyddKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSb3dWaXNpYmlsaXR5KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB2aXNpYmxlOiBib29sZWFuKSB7XG4gIGlmICh2aXNpYmxlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdwYmwtbmdyaWQtcm93LWhpZGRlbicpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncGJsLW5ncmlkLXJvdy1oaWRkZW4nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlNZXRhUm93Q2xhc3MobWV0YVJvd3NTZXJ2aWNlOiBQYmxOZ3JpZE1ldGFSb3dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFSb3dzOiBQYmxNZXRhUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZE1ldGFSb3c6IFBibE1ldGFSb3dEZWZpbml0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdNZXRhUm93OiBQYmxNZXRhUm93RGVmaW5pdGlvbnMpIHtcbiAgaWYgKG9sZE1ldGFSb3cpIHtcbiAgICBpZiAob2xkTWV0YVJvdy5yb3dDbGFzc05hbWUpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShvbGRNZXRhUm93LnJvd0NsYXNzTmFtZSk7XG4gICAgfVxuICAgIG1ldGFSb3dzU2VydmljZS5yZW1vdmVNZXRhUm93KG1ldGFSb3dzKTtcbiAgfVxuICBtZXRhUm93cy5tZXRhID0gbmV3TWV0YVJvdztcbiAgaWYgKG5ld01ldGFSb3cpIHtcbiAgICBpZiAobmV3TWV0YVJvdy5yb3dDbGFzc05hbWUpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChuZXdNZXRhUm93LnJvd0NsYXNzTmFtZSk7XG4gICAgfVxuICAgIG1ldGFSb3dzU2VydmljZS5hZGRNZXRhUm93KG1ldGFSb3dzKTtcbiAgfVxufVxuXG5jb25zdCBGSVJTVF9MQVNUX1JPV19TRUxFQ1RPUlMgPSB7XG4gIGhlYWRlcjoge1xuICAgIHNlbGVjdG9yOiAncGJsLW5ncmlkLWhlYWRlci1yb3cnLFxuICAgIGZpcnN0OiAncGJsLW5ncmlkLWZpcnN0LWhlYWRlci1yb3cnLFxuICAgIGxhc3Q6ICdwYmwtbmdyaWQtbGFzdC1oZWFkZXItcm93JyxcbiAgfSxcbiAgZm9vdGVyOiB7XG4gICAgc2VsZWN0b3I6ICdwYmwtbmdyaWQtZm9vdGVyLXJvdycsXG4gICAgZmlyc3Q6ICdwYmwtbmdyaWQtZmlyc3QtZm9vdGVyLXJvdycsXG4gICAgbGFzdDogJ3BibC1uZ3JpZC1sYXN0LWZvb3Rlci1yb3cnLFxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTWV0YVJvd0ZpcnN0TGFzdENsYXNzKHNlY3Rpb246IGtleW9mIHR5cGVvZiBGSVJTVF9MQVNUX1JPV19TRUxFQ1RPUlMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXY6IHsgZmlyc3Q/OiBFbGVtZW50OyBsYXN0PzogRWxlbWVudCB9KTogeyBmaXJzdD86IEVsZW1lbnQ7IGxhc3Q/OiBFbGVtZW50IH0ge1xuICBjb25zdCBzZWN0aW9uQ3NzID0gRklSU1RfTEFTVF9ST1dfU0VMRUNUT1JTW3NlY3Rpb25dO1xuICBjb25zdCByb3dzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKGAuJHtzZWN0aW9uQ3NzLnNlbGVjdG9yfTpub3QoLnBibC1uZ3JpZC1yb3ctdmlzdWFsbHktaGlkZGVuKTpub3QoLnBibC1uZ3JpZC1yb3ctaGlkZGVuKWApO1xuXG4gIGNvbnN0IGZpcnN0ID0gcm93c1swXTtcbiAgaWYgKHByZXYuZmlyc3QgIT09IGZpcnN0KSB7XG4gICAgcHJldi5maXJzdD8uY2xhc3NMaXN0LnJlbW92ZShzZWN0aW9uQ3NzLmZpcnN0KTtcbiAgICBmaXJzdD8uY2xhc3NMaXN0LmFkZChzZWN0aW9uQ3NzLmZpcnN0KTtcbiAgfVxuICBjb25zdCBsYXN0ID0gcm93c1tyb3dzLmxlbmd0aCAtIDFdO1xuICBpZiAocHJldi5sYXN0ICE9PSBsYXN0KSB7XG4gICAgcHJldi5sYXN0Py5jbGFzc0xpc3QucmVtb3ZlKHNlY3Rpb25Dc3MubGFzdCk7XG4gICAgbGFzdD8uY2xhc3NMaXN0LmFkZChzZWN0aW9uQ3NzLmxhc3QpO1xuICB9XG4gIHJldHVybiB7IGZpcnN0LCBsYXN0IH07XG59XG4iXX0=