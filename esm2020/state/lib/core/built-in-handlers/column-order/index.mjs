import { createStateChunkHandler } from '../../handling';
import { stateVisor } from '../../state-visor';
export function registerColumnOrderHandlers() {
    stateVisor.registerRootChunkSection('columnOrder', {
        sourceMatcher: ctx => ctx.grid.columnApi,
        stateMatcher: state => {
            if (!state.columnOrder) {
                state.columnOrder = [];
            }
            return state;
        }
    });
    createStateChunkHandler('columnOrder')
        .handleKeys('columnOrder')
        .serialize((key, ctx) => ctx.source.visibleColumnIds.slice())
        .deserialize((key, columnOrder, ctx) => {
        const { extApi, grid } = ctx;
        let lastMove;
        if (columnOrder?.length === grid.columnApi.visibleColumns.length) {
            for (let i = 0, len = columnOrder.length; i < len; i++) {
                const anchor = grid.columnApi.visibleColumns[i];
                if (columnOrder[i] !== anchor.id) {
                    const column = grid.columnApi.findColumn(columnOrder[i]);
                    if (!column) {
                        return;
                    }
                    lastMove = [column, anchor];
                    grid.columnApi.moveColumn(column, anchor);
                }
            }
        }
        // With this revert/redo of the last move we just trigger a redraw.
        if (lastMove) {
            grid.columnApi.moveColumn(lastMove[1], lastMove[0]);
            grid.columnApi.moveColumn(lastMove[0], lastMove[1]);
        }
    })
        .register();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3N0YXRlL3NyYy9saWIvY29yZS9idWlsdC1pbi1oYW5kbGVycy9jb2x1bW4tb3JkZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRy9DLE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsVUFBVSxDQUFDLHdCQUF3QixDQUNqQyxhQUFhLEVBQ2I7UUFDRSxhQUFhLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVM7UUFDeEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUN0QixLQUFLLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQzthQUN4QjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztLQUNGLENBQ0YsQ0FBQztJQUVGLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztTQUNuQyxVQUFVLENBQUMsYUFBYSxDQUFDO1NBQ3pCLFNBQVMsQ0FBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUU7U0FDOUQsV0FBVyxDQUFFLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN0QyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUM3QixJQUFJLFFBQWdDLENBQUM7UUFFckMsSUFBSSxXQUFXLEVBQUUsTUFBTSxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNoRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN0RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLEVBQUUsRUFBRTtvQkFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pELElBQUksQ0FBQyxNQUFNLEVBQUU7d0JBQ1gsT0FBTztxQkFDUjtvQkFDRCxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDM0M7YUFDRjtTQUNGO1FBQ0QsbUVBQW1FO1FBQ25FLElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUMsQ0FBQztTQUNELFFBQVEsRUFBRSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBibENvbHVtbiB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuaW1wb3J0IHsgY3JlYXRlU3RhdGVDaHVua0hhbmRsZXIgfSBmcm9tICcuLi8uLi9oYW5kbGluZyc7XG5pbXBvcnQgeyBzdGF0ZVZpc29yIH0gZnJvbSAnLi4vLi4vc3RhdGUtdmlzb3InO1xuaW1wb3J0IHsgUGJsTmdyaWRTdGF0ZUxvYWRPcHRpb25zIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29sdW1uT3JkZXJIYW5kbGVycygpIHtcbiAgc3RhdGVWaXNvci5yZWdpc3RlclJvb3RDaHVua1NlY3Rpb24oXG4gICAgJ2NvbHVtbk9yZGVyJyxcbiAgICB7XG4gICAgICBzb3VyY2VNYXRjaGVyOiBjdHggPT4gY3R4LmdyaWQuY29sdW1uQXBpLFxuICAgICAgc3RhdGVNYXRjaGVyOiBzdGF0ZSA9PiB7XG4gICAgICAgIGlmICghc3RhdGUuY29sdW1uT3JkZXIpIHtcbiAgICAgICAgICBzdGF0ZS5jb2x1bW5PcmRlciA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgY3JlYXRlU3RhdGVDaHVua0hhbmRsZXIoJ2NvbHVtbk9yZGVyJylcbiAgICAuaGFuZGxlS2V5cygnY29sdW1uT3JkZXInKVxuICAgIC5zZXJpYWxpemUoIChrZXksIGN0eCkgPT4gY3R4LnNvdXJjZS52aXNpYmxlQ29sdW1uSWRzLnNsaWNlKCkgKVxuICAgIC5kZXNlcmlhbGl6ZSggKGtleSwgY29sdW1uT3JkZXIsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgeyBleHRBcGksIGdyaWQgfSA9IGN0eDtcbiAgICAgIGxldCBsYXN0TW92ZTogW1BibENvbHVtbiwgUGJsQ29sdW1uXTtcblxuICAgICAgaWYgKGNvbHVtbk9yZGVyPy5sZW5ndGggPT09IGdyaWQuY29sdW1uQXBpLnZpc2libGVDb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29sdW1uT3JkZXIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBhbmNob3IgPSBncmlkLmNvbHVtbkFwaS52aXNpYmxlQ29sdW1uc1tpXTtcbiAgICAgICAgICBpZiAoY29sdW1uT3JkZXJbaV0gIT09IGFuY2hvci5pZCkge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uID0gZ3JpZC5jb2x1bW5BcGkuZmluZENvbHVtbihjb2x1bW5PcmRlcltpXSk7XG4gICAgICAgICAgICBpZiAoIWNvbHVtbikge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0TW92ZSA9IFtjb2x1bW4sIGFuY2hvcl07XG4gICAgICAgICAgICBncmlkLmNvbHVtbkFwaS5tb3ZlQ29sdW1uKGNvbHVtbiwgYW5jaG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdpdGggdGhpcyByZXZlcnQvcmVkbyBvZiB0aGUgbGFzdCBtb3ZlIHdlIGp1c3QgdHJpZ2dlciBhIHJlZHJhdy5cbiAgICAgIGlmIChsYXN0TW92ZSkge1xuICAgICAgICBncmlkLmNvbHVtbkFwaS5tb3ZlQ29sdW1uKGxhc3RNb3ZlWzFdLCBsYXN0TW92ZVswXSk7XG4gICAgICAgIGdyaWQuY29sdW1uQXBpLm1vdmVDb2x1bW4obGFzdE1vdmVbMF0sIGxhc3RNb3ZlWzFdKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5yZWdpc3RlcigpO1xuICB9XG4iXX0=