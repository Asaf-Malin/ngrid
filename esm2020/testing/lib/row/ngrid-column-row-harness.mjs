import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';
import { PblNgridColumnCellHarness, PblNgridDataCellHarness } from '../cell/ngrid-column-cell-harness';
/**
 * Harness for interacting with rows that are structured based on a column
 */
export class PblNgridColumnRowHarness extends ComponentHarness {
    async getCells(filter = {}, type) {
        if (!type) {
            type = PblNgridColumnCellHarness;
        }
        return this.locatorForAll(type.with(filter))();
    }
}
export class PblNgridColumnHeaderRowHarness extends PblNgridColumnRowHarness {
    async getCellByColumnId(columnId) {
        const result = await this.getCells({ columnIds: [columnId] });
        if (result) {
            return result[0];
        }
    }
    async getCells(filter = {}) {
        return super.getCells(filter, PblNgridColumnCellHarness);
    }
}
// TODO: better detection here, not relay on class that might change.
PblNgridColumnHeaderRowHarness.hostSelector = `div[pbl-ngrid-fixed-meta-row-container="header"] pbl-ngrid-column-row.pbl-ngrid-header-row-main`;
export class PblNgridDataRowHarness extends PblNgridColumnRowHarness {
    /**
     * Gets a `HarnessPredicate` that can be used to search for a nGrid data row with specific attributes.
     * @param options Options for narrowing the search
     * @return a `HarnessPredicate` configured with the given options.
     */
    static with(options = {}) {
        return getDataRowPredicate(PblNgridDataRowHarness, options);
    }
    async getRowIndex() {
        const attr = await this.host().then(host => host.getAttribute('row-id'));
        return Number(attr);
    }
    async getRowIdentity() {
        return await this.host().then(host => host.getAttribute('row-key'));
    }
    async getCells(filter = {}) {
        return super.getCells(filter, PblNgridDataCellHarness);
    }
}
// TODO: better detection here, not relay on class that might change.
PblNgridDataRowHarness.hostSelector = `pbl-cdk-table pbl-ngrid-row`;
export function getDataRowPredicate(type, options) {
    // We can't use FluentApi here because ngc will cry
    const predicate = new HarnessPredicate(type, options);
    predicate
        .addOption('rowIndex', options.rowIndex, (harness, rowIndex) => harness.getRowIndex().then(result => result === rowIndex))
        .addOption('rowIdentity', options.rowIdentity, (harness, rowIdentity) => HarnessPredicate.stringMatches(harness.getRowIdentity(), rowIdentity));
    return predicate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyaWQtY29sdW1uLXJvdy1oYXJuZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3JpZC90ZXN0aW5nL3NyYy9saWIvcm93L25ncmlkLWNvbHVtbi1yb3ctaGFybmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQStCLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFdkcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLHVCQUF1QixFQUFtQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXhJOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGdCQUFnQjtJQUk1RCxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQW1DLEVBQUUsRUFBRSxJQUF1QztRQUMzRixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLHlCQUF5QixDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUUsRUFBRSxDQUFDO0lBQ25ELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw4QkFBK0IsU0FBUSx3QkFBd0I7SUFJMUUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFFBQWdCO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5RCxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBeUMsRUFBRTtRQUN4RCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDM0QsQ0FBQzs7QUFaRCxxRUFBcUU7QUFDOUQsMkNBQVksR0FBRyxpR0FBaUcsQ0FBQztBQWMxSCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsd0JBQXdCO0lBSWxFOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQXlDLEVBQUU7UUFDckQsT0FBTyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVc7UUFDZixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFFLENBQUM7UUFDM0UsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjO1FBQ2xCLE9BQU8sTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQWlDLEVBQUU7UUFDaEQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7O0FBdkJELHFFQUFxRTtBQUM5RCxtQ0FBWSxHQUFHLDZCQUE2QixDQUFDO0FBeUJ0RCxNQUFNLFVBQVUsbUJBQW1CLENBQW1DLElBQW9DLEVBQzNDLE9BQXNDO0lBQ25HLG1EQUFtRDtJQUNuRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV0RCxTQUFTO1NBQ04sU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUNuQyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUM7U0FDckYsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsV0FBVyxFQUN6QyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUV2RyxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50SGFybmVzcywgQ29tcG9uZW50SGFybmVzc0NvbnN0cnVjdG9yLCBIYXJuZXNzUHJlZGljYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQ29sdW1uQ2VsbEhhcm5lc3NGaWx0ZXJzLCBEYXRhQ2VsbEhhcm5lc3NGaWx0ZXJzLCBDb2x1bW5IZWFkZXJDZWxsSGFybmVzc0ZpbHRlcnMsIFBibE5ncmlkRGF0YVJvd0hhcm5lc3NGaWx0ZXJzIH0gZnJvbSAnLi4vbmdyaWQtaGFybmVzcy1maWx0ZXJzJztcbmltcG9ydCB7IFBibE5ncmlkQ29sdW1uQ2VsbEhhcm5lc3MsIFBibE5ncmlkRGF0YUNlbGxIYXJuZXNzLCBQYmxOZ3JpZENvbHVtbkhlYWRlckNlbGxIYXJuZXNzIH0gZnJvbSAnLi4vY2VsbC9uZ3JpZC1jb2x1bW4tY2VsbC1oYXJuZXNzJztcblxuLyoqXG4gKiBIYXJuZXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIHJvd3MgdGhhdCBhcmUgc3RydWN0dXJlZCBiYXNlZCBvbiBhIGNvbHVtblxuICovXG5leHBvcnQgY2xhc3MgUGJsTmdyaWRDb2x1bW5Sb3dIYXJuZXNzIGV4dGVuZHMgQ29tcG9uZW50SGFybmVzcyB7XG4gIGFzeW5jIGdldENlbGxzKGZpbHRlcjogQ29sdW1uSGVhZGVyQ2VsbEhhcm5lc3NGaWx0ZXJzLCB0eXBlOiB0eXBlb2YgUGJsTmdyaWRDb2x1bW5IZWFkZXJDZWxsSGFybmVzcyk6IFByb21pc2U8UGJsTmdyaWRDb2x1bW5IZWFkZXJDZWxsSGFybmVzc1tdPlxuICBhc3luYyBnZXRDZWxscyhmaWx0ZXI6IERhdGFDZWxsSGFybmVzc0ZpbHRlcnMsIHR5cGU6IHR5cGVvZiBQYmxOZ3JpZERhdGFDZWxsSGFybmVzcyk6IFByb21pc2U8UGJsTmdyaWREYXRhQ2VsbEhhcm5lc3NbXT5cbiAgYXN5bmMgZ2V0Q2VsbHMoZmlsdGVyOiBDb2x1bW5DZWxsSGFybmVzc0ZpbHRlcnMpOiBQcm9taXNlPFBibE5ncmlkQ29sdW1uQ2VsbEhhcm5lc3NbXT47XG4gIGFzeW5jIGdldENlbGxzKGZpbHRlcjogQ29sdW1uQ2VsbEhhcm5lc3NGaWx0ZXJzID0ge30sIHR5cGU/OiB0eXBlb2YgUGJsTmdyaWRDb2x1bW5DZWxsSGFybmVzcyk6IFByb21pc2U8UGJsTmdyaWRDb2x1bW5DZWxsSGFybmVzc1tdPiB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0eXBlID0gUGJsTmdyaWRDb2x1bW5DZWxsSGFybmVzcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9jYXRvckZvckFsbCggdHlwZS53aXRoKGZpbHRlcikgKSgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYmxOZ3JpZENvbHVtbkhlYWRlclJvd0hhcm5lc3MgZXh0ZW5kcyBQYmxOZ3JpZENvbHVtblJvd0hhcm5lc3Mge1xuICAvLyBUT0RPOiBiZXR0ZXIgZGV0ZWN0aW9uIGhlcmUsIG5vdCByZWxheSBvbiBjbGFzcyB0aGF0IG1pZ2h0IGNoYW5nZS5cbiAgc3RhdGljIGhvc3RTZWxlY3RvciA9IGBkaXZbcGJsLW5ncmlkLWZpeGVkLW1ldGEtcm93LWNvbnRhaW5lcj1cImhlYWRlclwiXSBwYmwtbmdyaWQtY29sdW1uLXJvdy5wYmwtbmdyaWQtaGVhZGVyLXJvdy1tYWluYDtcblxuICBhc3luYyBnZXRDZWxsQnlDb2x1bW5JZChjb2x1bW5JZDogc3RyaW5nKTogUHJvbWlzZTxQYmxOZ3JpZENvbHVtbkNlbGxIYXJuZXNzPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRDZWxscyh7IGNvbHVtbklkczogW2NvbHVtbklkXSB9KTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldENlbGxzKGZpbHRlcjogQ29sdW1uSGVhZGVyQ2VsbEhhcm5lc3NGaWx0ZXJzID0ge30pIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0Q2VsbHMoZmlsdGVyLCBQYmxOZ3JpZENvbHVtbkNlbGxIYXJuZXNzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGJsTmdyaWREYXRhUm93SGFybmVzcyBleHRlbmRzIFBibE5ncmlkQ29sdW1uUm93SGFybmVzcyB7XG4gIC8vIFRPRE86IGJldHRlciBkZXRlY3Rpb24gaGVyZSwgbm90IHJlbGF5IG9uIGNsYXNzIHRoYXQgbWlnaHQgY2hhbmdlLlxuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gYHBibC1jZGstdGFibGUgcGJsLW5ncmlkLXJvd2A7XG5cbiAgLyoqXG4gICAqIEdldHMgYSBgSGFybmVzc1ByZWRpY2F0ZWAgdGhhdCBjYW4gYmUgdXNlZCB0byBzZWFyY2ggZm9yIGEgbkdyaWQgZGF0YSByb3cgd2l0aCBzcGVjaWZpYyBhdHRyaWJ1dGVzLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBuYXJyb3dpbmcgdGhlIHNlYXJjaFxuICAgKiBAcmV0dXJuIGEgYEhhcm5lc3NQcmVkaWNhdGVgIGNvbmZpZ3VyZWQgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICovXG4gIHN0YXRpYyB3aXRoKG9wdGlvbnM6IFBibE5ncmlkRGF0YVJvd0hhcm5lc3NGaWx0ZXJzID0ge30pOiBIYXJuZXNzUHJlZGljYXRlPFBibE5ncmlkRGF0YVJvd0hhcm5lc3M+IHtcbiAgICByZXR1cm4gZ2V0RGF0YVJvd1ByZWRpY2F0ZShQYmxOZ3JpZERhdGFSb3dIYXJuZXNzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJvd0luZGV4KCk6IFByb21pc2U8bnVtYmVyIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgYXR0ciA9IGF3YWl0IHRoaXMuaG9zdCgpLnRoZW4oIGhvc3QgPT4gaG9zdC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pZCcpICk7XG4gICAgcmV0dXJuIE51bWJlcihhdHRyKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJvd0lkZW50aXR5KCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaG9zdCgpLnRoZW4oIGhvc3QgPT4gaG9zdC5nZXRBdHRyaWJ1dGUoJ3Jvdy1rZXknKSApO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q2VsbHMoZmlsdGVyOiBEYXRhQ2VsbEhhcm5lc3NGaWx0ZXJzID0ge30pIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0Q2VsbHMoZmlsdGVyLCBQYmxOZ3JpZERhdGFDZWxsSGFybmVzcyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFSb3dQcmVkaWNhdGU8VCBleHRlbmRzIFBibE5ncmlkRGF0YVJvd0hhcm5lc3M+KHR5cGU6IENvbXBvbmVudEhhcm5lc3NDb25zdHJ1Y3RvcjxUPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFBibE5ncmlkRGF0YVJvd0hhcm5lc3NGaWx0ZXJzKTogSGFybmVzc1ByZWRpY2F0ZTxUPiB7XG4gIC8vIFdlIGNhbid0IHVzZSBGbHVlbnRBcGkgaGVyZSBiZWNhdXNlIG5nYyB3aWxsIGNyeVxuICBjb25zdCBwcmVkaWNhdGUgPSBuZXcgSGFybmVzc1ByZWRpY2F0ZSh0eXBlLCBvcHRpb25zKTtcblxuICBwcmVkaWNhdGVcbiAgICAuYWRkT3B0aW9uKCdyb3dJbmRleCcsIG9wdGlvbnMucm93SW5kZXgsXG4gICAgICAgIChoYXJuZXNzLCByb3dJbmRleCkgPT4gaGFybmVzcy5nZXRSb3dJbmRleCgpLnRoZW4oIHJlc3VsdCA9PiByZXN1bHQgPT09IHJvd0luZGV4KSlcbiAgICAuYWRkT3B0aW9uKCdyb3dJZGVudGl0eScsIG9wdGlvbnMucm93SWRlbnRpdHksXG4gICAgICAgIChoYXJuZXNzLCByb3dJZGVudGl0eSkgPT4gSGFybmVzc1ByZWRpY2F0ZS5zdHJpbmdNYXRjaGVzKGhhcm5lc3MuZ2V0Um93SWRlbnRpdHkoKSwgcm93SWRlbnRpdHkpKTtcblxuICByZXR1cm4gcHJlZGljYXRlO1xufVxuIl19