import { ContentContainerComponentHarness, HarnessPredicate } from '@angular/cdk/testing';
import { PblNgridColumnHeaderRowHarness, PblNgridDataRowHarness } from '../row/ngrid-column-row-harness';
export class PblNgridHarness extends ContentContainerComponentHarness {
    static register(key, method) {
        PblNgridHarness.prototype[key] = method;
    }
    /**
     * Gets a `HarnessPredicate` that can be used to search for a nGrid with specific attributes.
     * @param options Options for narrowing the search
     * @return a `HarnessPredicate` configured with the given options.
     */
    static with(options = {}) {
        return new HarnessPredicate(PblNgridHarness, options);
    }
    async getColumnHeaderRow() {
        return this.locatorFor(PblNgridColumnHeaderRowHarness)();
    }
    async getDataRow(rowIdentOrIndex) {
        if (typeof rowIdentOrIndex === 'number') {
            return this.locatorFor(PblNgridDataRowHarness.with({ rowIndex: rowIdentOrIndex }))();
        }
        else {
            return this.locatorFor(PblNgridDataRowHarness.with({ rowIdentity: rowIdentOrIndex }))();
        }
    }
    async getDataRows() {
        await this.forceStabilize();
        return this.locatorForAll(PblNgridDataRowHarness)();
    }
}
PblNgridHarness.hostSelector = 'pbl-ngrid';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyaWQtY29tcG9uZW50LWhhcm5lc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3Rlc3Rpbmcvc3JjL2xpYi9ncmlkL25ncmlkLWNvbXBvbmVudC1oYXJuZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR3pHLE1BQU0sT0FBTyxlQUFnQixTQUFRLGdDQUFnQztJQUduRSxNQUFNLENBQUMsUUFBUSxDQUFrQyxHQUFNLEVBQUUsTUFBMEI7UUFDakYsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQWtDLEVBQUU7UUFDOUMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQjtRQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDO0lBQzNELENBQUM7SUFJRCxLQUFLLENBQUMsVUFBVSxDQUFDLGVBQWdDO1FBQy9DLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDdEY7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLENBQUUsQ0FBQyxFQUFFLENBQUM7U0FDMUY7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVc7UUFDZixNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDO0lBQ3RELENBQUM7O0FBaENNLDRCQUFZLEdBQUcsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudENvbnRhaW5lckNvbXBvbmVudEhhcm5lc3MsIEhhcm5lc3NQcmVkaWNhdGUgfSBmcm9tICdAYW5ndWxhci9jZGsvdGVzdGluZyc7XG5pbXBvcnQgeyBQYmxOZ3JpZENvbHVtbkhlYWRlclJvd0hhcm5lc3MsIFBibE5ncmlkRGF0YVJvd0hhcm5lc3MgfSBmcm9tICcuLi9yb3cvbmdyaWQtY29sdW1uLXJvdy1oYXJuZXNzJztcbmltcG9ydCB7IFBibE5ncmlkSGFybmVzc0ZpbHRlcnMgfSBmcm9tICcuLi9uZ3JpZC1oYXJuZXNzLWZpbHRlcnMnO1xuXG5leHBvcnQgY2xhc3MgUGJsTmdyaWRIYXJuZXNzIGV4dGVuZHMgQ29udGVudENvbnRhaW5lckNvbXBvbmVudEhhcm5lc3Mge1xuICBzdGF0aWMgaG9zdFNlbGVjdG9yID0gJ3BibC1uZ3JpZCc7XG5cbiAgc3RhdGljIHJlZ2lzdGVyPFAgZXh0ZW5kcyBrZXlvZiBQYmxOZ3JpZEhhcm5lc3M+KGtleTogUCwgbWV0aG9kOiBQYmxOZ3JpZEhhcm5lc3NbUF0pIHtcbiAgICBQYmxOZ3JpZEhhcm5lc3MucHJvdG90eXBlW2tleV0gPSBtZXRob2Q7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIGBIYXJuZXNzUHJlZGljYXRlYCB0aGF0IGNhbiBiZSB1c2VkIHRvIHNlYXJjaCBmb3IgYSBuR3JpZCB3aXRoIHNwZWNpZmljIGF0dHJpYnV0ZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIG5hcnJvd2luZyB0aGUgc2VhcmNoXG4gICAqIEByZXR1cm4gYSBgSGFybmVzc1ByZWRpY2F0ZWAgY29uZmlndXJlZCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKi9cbiAgc3RhdGljIHdpdGgob3B0aW9uczogUGJsTmdyaWRIYXJuZXNzRmlsdGVycyA9IHt9KTogSGFybmVzc1ByZWRpY2F0ZTxQYmxOZ3JpZEhhcm5lc3M+IHtcbiAgICByZXR1cm4gbmV3IEhhcm5lc3NQcmVkaWNhdGUoUGJsTmdyaWRIYXJuZXNzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbHVtbkhlYWRlclJvdygpOiBQcm9taXNlPFBibE5ncmlkQ29sdW1uSGVhZGVyUm93SGFybmVzcz4ge1xuICAgIHJldHVybiB0aGlzLmxvY2F0b3JGb3IoUGJsTmdyaWRDb2x1bW5IZWFkZXJSb3dIYXJuZXNzKSgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YVJvdyhyb3dJZGVudGl0eTogc3RyaW5nKTogUHJvbWlzZTxQYmxOZ3JpZERhdGFSb3dIYXJuZXNzIHwgdW5kZWZpbmVkPlxuICBhc3luYyBnZXREYXRhUm93KHJvd0luZGV4OiBudW1iZXIpOiBQcm9taXNlPFBibE5ncmlkRGF0YVJvd0hhcm5lc3MgfCB1bmRlZmluZWQ+OyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOiB1bmlmaWVkLXNpZ25hdHVyZXNcbiAgYXN5bmMgZ2V0RGF0YVJvdyhyb3dJZGVudE9ySW5kZXg6IHN0cmluZyB8IG51bWJlcik6IFByb21pc2U8UGJsTmdyaWREYXRhUm93SGFybmVzcyB8IHVuZGVmaW5lZD4ge1xuICAgIGlmICh0eXBlb2Ygcm93SWRlbnRPckluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYXRvckZvcihQYmxOZ3JpZERhdGFSb3dIYXJuZXNzLndpdGgoeyByb3dJbmRleDogcm93SWRlbnRPckluZGV4IH0pKSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhdG9yRm9yKFBibE5ncmlkRGF0YVJvd0hhcm5lc3Mud2l0aCh7IHJvd0lkZW50aXR5OiByb3dJZGVudE9ySW5kZXggfSApKSgpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldERhdGFSb3dzKCk6IFByb21pc2U8UGJsTmdyaWREYXRhUm93SGFybmVzc1tdPiB7XG4gICAgYXdhaXQgdGhpcy5mb3JjZVN0YWJpbGl6ZSgpO1xuICAgIHJldHVybiB0aGlzLmxvY2F0b3JGb3JBbGwoUGJsTmdyaWREYXRhUm93SGFybmVzcykoKTtcbiAgfVxufVxuXG4iXX0=