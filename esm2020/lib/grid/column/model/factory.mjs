import { deprecatedWarning } from '@pebula/ngrid/core';
import { PblMetaColumn } from './meta-column';
import { PblColumn } from './column';
import { PblColumnGroup, PblColumnGroupStore } from './group-column';
export class PblColumnFactory {
    constructor() {
        this._raw = { table: { cols: [] }, header: [], footer: [], headerGroup: [] };
        this._defaults = {
            table: {},
            header: {},
            footer: {},
        };
        this._currentHeaderRow = 0;
        this._currentFooterRow = 0;
    }
    get currentHeaderRow() { return this._currentHeaderRow; }
    get currentFooterRow() { return this._currentFooterRow; }
    static fromDefinitionSet(defs) {
        const f = new PblColumnFactory();
        Object.assign(f._raw, defs);
        return f;
    }
    build() {
        const { _defaults, _raw } = this;
        const groupStore = new PblColumnGroupStore();
        const table = {
            header: _raw.table.header,
            footer: _raw.table.footer,
            cols: _raw.table.cols.map(d => new PblColumn({ ..._defaults.table, ...d }, groupStore)),
        };
        const header = _raw.header.map(h => ({
            rowIndex: h.rowIndex,
            rowClassName: h.rowClassName,
            type: h.type || 'fixed',
            cols: h.cols.map(c => new PblMetaColumn({ ..._defaults.header, ...c })),
        }));
        const footer = _raw.footer.map(f => ({
            rowIndex: f.rowIndex,
            rowClassName: f.rowClassName,
            type: f.type || 'fixed',
            cols: f.cols.map(c => new PblMetaColumn({ ..._defaults.footer, ...c }))
        }));
        const headerGroup = _raw.headerGroup.map(hg => ({
            rowIndex: hg.rowIndex,
            rowClassName: hg.rowClassName,
            type: hg.type || 'fixed',
            cols: this.buildHeaderGroups(hg.rowIndex, hg.cols, table.cols).map(g => {
                groupStore.add(g);
                return g;
            }),
        }));
        return {
            groupStore,
            table,
            header,
            footer,
            headerGroup,
        };
    }
    default(def, type = 'table') {
        this._defaults[type] = def;
        return this;
    }
    table(...defs) {
        const rowOptions = defs[0].prop ? {} : defs.shift();
        const { header, footer } = rowOptions;
        Object.assign(this._raw.table, { header, footer });
        this._raw.table.cols.push(...defs);
        return this;
    }
    header(...defs) {
        const rowIndex = this._currentHeaderRow++;
        const rowOptions = this.processRowOptions(defs);
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const headers = defs.map((d) => {
            const def = {
                id: d.id,
                kind: 'header',
                rowIndex
            };
            return Object.assign(def, d);
        });
        this._raw.header.push({
            rowIndex,
            rowClassName,
            cols: headers,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    footer(...defs) {
        const rowIndex = this._currentFooterRow++;
        const rowOptions = this.processRowOptions(defs);
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const footers = defs.map((d) => {
            const def = {
                id: d.id,
                kind: 'footer',
                rowIndex
            };
            return Object.assign(def, d);
        });
        this._raw.footer.push({
            rowIndex,
            rowClassName,
            cols: footers,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    headerGroup(...defs) {
        const rowIndex = this._currentHeaderRow++;
        const rowOptions = this.processRowOptions(defs, 'columnIds', 'prop');
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const headerGroups = defs.map(d => Object.assign({ rowIndex }, d));
        this._raw.headerGroup.push({
            rowIndex,
            rowClassName,
            cols: headerGroups,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    processRowOptions(defs, ...mustHaveProperty) {
        if (mustHaveProperty.length === 0) {
            mustHaveProperty = ['id'];
        }
        for (const prop of mustHaveProperty) {
            if (prop in defs[0]) {
                return;
            }
        }
        return defs.shift();
    }
    genRowClass(rowOptions, fallbackRowIndex) {
        return (rowOptions && rowOptions.rowClassName) || `pbl-ngrid-row-index-${fallbackRowIndex.toString()}`;
    }
    buildHeaderGroups(rowIndex, headerGroupDefs, table) {
        const headerGroup = [];
        // Building of header group rows requires some work.
        // The user defined groups might not cover all columns, creating gaps between group columns so we need to add placeholder groups to cover these gaps.
        // Moreover, the user might not specify a `prop`, which we might need to complete.
        // We do that for each header group row.
        //
        // The end goal is to return a list of `PblColumnGroup` that span over the entire columns of the grid.
        //
        // The logic is as follows:
        // For each column in the grid, find a matching column group - a group pointing at the column by having the same `prop`
        // If found, check it's span and skip X amount of columns where X is the span.
        // If a span is not defined then treat it as a greedy group that spans over all columns ahead until the next column that has a matching group column.
        //
        // If a column does not have a matching group column, search for group columns without a `prop` specified and when found set their `prop` to the current
        // column so we will now use them as if it's a user provided group for this column...
        //
        // If no group columns exists (or left), we create an ad-hoc group column and we will now use them as if it's a user provided group for this column...
        //
        const tableDefs = table.slice();
        const defs = headerGroupDefs.slice();
        for (const d of defs) {
            // TODO: remove in V5, when prop & span are deprecated
            // @deprecated Will be removed in v5
            if (d.prop) {
                if (typeof ngDevMode === 'undefined' || ngDevMode) {
                    deprecatedWarning('PblColumnGroupDefinition.prop', '4', 'PblColumnGroupDefinition.columnIds');
                    deprecatedWarning('PblColumnGroupDefinition.span', '4', 'PblColumnGroupDefinition.columnIds');
                }
                const start = tableDefs.findIndex(c => c.orgProp === d.prop);
                d.columnIds = tableDefs.slice(start, start + d.span + 1).map(c => c.id);
                delete d.prop;
                delete d.span;
            }
            d.rowIndex = rowIndex;
            const group = new PblColumnGroup(d, tableDefs.filter(c => d.columnIds.indexOf(c.orgProp) > -1), false);
            headerGroup.push(group);
        }
        let marker = 0;
        while (tableDefs.length) {
            const column = tableDefs.shift();
            const orgProp = column.orgProp;
            const existingGroupIndex = headerGroup.findIndex(hg => hg.columnIds.indexOf(orgProp) > -1);
            if (existingGroupIndex > -1) {
                const hg = headerGroup[existingGroupIndex];
                if (existingGroupIndex < marker) {
                    const columns = [column];
                    while (hg.columnIds.indexOf(tableDefs[0]?.orgProp) > -1) {
                        columns.push(tableDefs.shift());
                    }
                    headerGroup[marker] = hg.createSlave(columns);
                    marker += 1;
                }
                else {
                    while (hg.columnIds.indexOf(tableDefs[0]?.orgProp) > -1) {
                        tableDefs.shift();
                    }
                    marker += 1;
                }
            }
            else {
                const prev = headerGroup[marker - 1];
                if (prev?.placeholder) {
                    const clone = Object.keys(prev).reduce((p, c) => {
                        p[c] = prev[c];
                        return p;
                    }, {});
                    clone.columnIds = [...clone.columnIds, orgProp];
                    delete clone.id;
                    headerGroup[marker - 1] = new PblColumnGroup(clone, [...prev.columns, column], true);
                }
                else {
                    const d = { rowIndex, kind: 'header', columnIds: [orgProp] };
                    headerGroup.splice(marker, 0, new PblColumnGroup(d, [column], true));
                    marker += 1;
                }
            }
        }
        return headerGroup;
    }
}
export function columnFactory() {
    return new PblColumnFactory();
}
//# sourceMappingURL=data:application/json;base64,